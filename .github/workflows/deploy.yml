name: CI/CD Pipeline for MarketSnap

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Install Functions dependencies
        working-directory: ./functions
        run: npm install

      # Create a dummy .env file to satisfy asset requirements for analyzer and tests
      - name: Create dummy .env file
        run: touch .env

      - name: Create dummy Firebase options for validation
        run: |
          mkdir -p lib
          cat > lib/firebase_options.dart << 'EOF'
          // Dummy Firebase options for CI validation
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;
          
          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              if (kIsWeb) {
                throw UnsupportedError('Web platform not supported');
              }
              switch (defaultTargetPlatform) {
                case TargetPlatform.android:
                  return android;
                case TargetPlatform.iOS:
                  return ios;
                default:
                  throw UnsupportedError('Platform not supported');
              }
            }
          
            static const FirebaseOptions android = FirebaseOptions(
              apiKey: 'dummy-key',
              appId: '1:123456789:android:dummy',
              messagingSenderId: '123456789',
              projectId: 'dummy-project',
              storageBucket: 'dummy-project.appspot.com',
            );
          
            static const FirebaseOptions ios = FirebaseOptions(
              apiKey: 'dummy-key',
              appId: '1:123456789:ios:dummy',
              messagingSenderId: '123456789',
              projectId: 'dummy-project',
              storageBucket: 'dummy-project.appspot.com',
              iosBundleId: 'com.example.marketsnap',
            );
          }
          EOF
          echo "âœ… Created dummy lib/firebase_options.dart for validation"

      - name: Run analyzer
        run: flutter analyze

      - name: Lint, build, and test functions
        working-directory: ./functions
        run: |
          npm run lint
          npm run build
          npm test

      - name: Run tests
        run: flutter test

  deploy_android:
    name: Build and Deploy Android
    needs: [validate]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Firebase Tools
        run: |
          npm install -g firebase-tools
          dart pub global activate flutterfire_cli
          echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: Authenticate with Google Cloud
        env:
          SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "$SERVICE_ACCOUNT_KEY" > ./service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/service-account.json" >> $GITHUB_ENV
          echo "âœ… Authenticated with Google Cloud via Service Account"

      - name: Generate firebase.json from template
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          ANDROID_APP_ID: ${{ secrets.ANDROID_APP_ID }}
          IOS_APP_ID: ${{ secrets.IOS_APP_ID }}
        run: |
          sudo apt-get update && sudo apt-get install -y gettext-base
          envsubst < firebase.json.template > firebase.json
          echo "âœ… Generated firebase.json from template"

      - name: Setup Firebase Project
        run: |
          firebase projects:list
          firebase use --add ${{ secrets.FIREBASE_PROJECT_ID }} --alias default
          echo "âœ… Firebase project setup complete"

      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo $GOOGLE_SERVICES_JSON > android/app/google-services.json

      - name: Install dependencies
        run: flutter pub get
      
      - name: Create .env file
        env:
          DOTENV: ${{ secrets.DOTENV }}
        run: echo "$DOTENV" > .env

      - name: Generate Firebase options file
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          flutterfire configure --project=$FIREBASE_PROJECT_ID --platforms=android,ios --out=lib/firebase_options.dart --yes
          echo "âœ… Generated lib/firebase_options.dart"

      - name: Setup Release Keystore
        env:
          RELEASE_KEYSTORE_BASE64: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          # Decode and save the release keystore
          echo "$RELEASE_KEYSTORE_BASE64" | base64 --decode > android/app/release.keystore
          
          # Create key.properties file for signing
          cat > android/key.properties << EOF
          storeFile=release.keystore
          storePassword=$KEYSTORE_PASSWORD
          keyAlias=$KEY_ALIAS
          keyPassword=$KEY_PASSWORD
          EOF
          
          echo "âœ… Release keystore and signing configuration ready"

      - name: Build Android APK
        run: |
          flutter clean
          flutter build apk --release

      - name: Deploy Firebase Backend
        run: |
          cd functions
          npm install
          npm run build
          cd ..
          firebase deploy --only functions,firestore,storage --non-interactive

      - name: Configure TTL Policies
        run: |
          echo "ðŸ”„ Setting up TTL policy for messages collection..."
          # Configure TTL policy for messages collection expiresAt field
          gcloud firestore fields ttls update expiresAt \
            --collection-group=messages \
            --enable-ttl \
            --project=${{ secrets.FIREBASE_PROJECT_ID }} \
            --quiet
          echo "âœ… TTL policy configured successfully"

      - name: Activate Service Account for gcloud
        run: gcloud auth activate-service-account --key-file=./service-account.json

      - name: Deploy to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.ANDROID_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
          groups: testers
          file: build/app/outputs/flutter-apk/app-release.apk
  
#  deploy_ios:
#    name: Build and Deploy iOS
#    needs: [validate]
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#    runs-on: macos-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Setup Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          channel: 'stable'
#
#      - name: Decode GoogleService-Info.plist
#        env:
#          GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}
#        run: |
#          echo "$GOOGLE_SERVICE_INFO_PLIST" | base64 --decode > ios/Runner/GoogleService-Info.plist
#
#      - name: Install Apple Certificate and Provisioning Profile
#        env:
#          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#        run: |
#          # create variables
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#
#          # import certificate and provisioning profile from secrets
#          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
#
#          # create temporary keychain
#          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#
#          # import certificate to keychain
#          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#          security list-keychain -d user -s $KEYCHAIN_PATH
#
#          # apply provisioning profile
#          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#
#      - name: Install dependencies
#        run: flutter pub get
#      
#      - name: Build iOS
#        run: |
#          flutter build ipa --release --export-options-plist=ios/ExportOptions.plist
#          
#      - name: Deploy to Firebase App Distribution
#        uses: wzieba/Firebase-Distribution-Github-Action@v1
#        with:
#          appId: ${{ secrets.IOS_APP_ID }}
#          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
#          groups: testers
#          file: build/ios/ipa/*.ipa 