name: CI/CD Pipeline for MarketSnap

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Cache Flutter pub dependencies for validation
      - name: Cache Flutter pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: flutter-pub-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            flutter-pub-${{ runner.os }}-

      # Cache Node.js dependencies for validation
      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: functions/node_modules
          key: node-${{ runner.os }}-${{ hashFiles('functions/package-lock.json', 'functions/package.json') }}
          restore-keys: |
            node-${{ runner.os }}-

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Install Functions dependencies
        working-directory: ./functions
        run: npm install

      # Create a dummy .env file to satisfy asset requirements for analyzer and tests
      - name: Create dummy .env file
        run: touch .env

      - name: Create dummy Firebase options for validation
        run: |
          mkdir -p lib
          cat > lib/firebase_options.dart << 'EOF'
          // Dummy Firebase options for CI validation
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;
          
          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              if (kIsWeb) {
                throw UnsupportedError('Web platform not supported');
              }
              switch (defaultTargetPlatform) {
                case TargetPlatform.android:
                  return android;
                case TargetPlatform.iOS:
                  return ios;
                default:
                  throw UnsupportedError('Platform not supported');
              }
            }
          
            static const FirebaseOptions android = FirebaseOptions(
              apiKey: 'dummy-key',
              appId: '1:123456789:android:dummy',
              messagingSenderId: '123456789',
              projectId: 'dummy-project',
              storageBucket: 'dummy-project.appspot.com',
            );
          
            static const FirebaseOptions ios = FirebaseOptions(
              apiKey: 'dummy-key',
              appId: '1:123456789:ios:dummy',
              messagingSenderId: '123456789',
              projectId: 'dummy-project',
              storageBucket: 'dummy-project.appspot.com',
              iosBundleId: 'com.example.marketsnap',
            );
          }
          EOF
          echo "✅ Created dummy lib/firebase_options.dart for validation"

      - name: Run analyzer
        run: flutter analyze

      - name: Lint, build, and test functions
        working-directory: ./functions
        run: |
          npm run lint
          npm run build
          npm test

      - name: Run tests
        run: flutter test

  build_android:
    name: Build Android APK
    needs: [validate]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Cache Flutter pub dependencies
      - name: Cache Flutter pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: flutter-pub-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            flutter-pub-${{ runner.os }}-

      # Cache Gradle dependencies and wrapper
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties', 'android/build.gradle.kts', 'android/app/build.gradle.kts') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # Cache Gradle build outputs for faster incremental builds
      - name: Cache Gradle build cache
        uses: actions/cache@v4
        with:
          path: |
            android/build
            android/app/build
          key: gradle-build-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            gradle-build-${{ runner.os }}-

      # Cache Node.js dependencies for Firebase Functions
      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: functions/node_modules
          key: node-${{ runner.os }}-${{ hashFiles('functions/package-lock.json', 'functions/package.json') }}
          restore-keys: |
            node-${{ runner.os }}-

      # Cache Firebase CLI and tools
      - name: Cache Firebase CLI
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/firebase
            ~/.npm
          key: firebase-cli-${{ runner.os }}-${{ hashFiles('functions/package.json') }}
          restore-keys: |
            firebase-cli-${{ runner.os }}-

      - name: Install Firebase Tools
        run: |
          npm install -g firebase-tools
          dart pub global activate flutterfire_cli
          echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: Authenticate with Google Cloud
        env:
          SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "$SERVICE_ACCOUNT_KEY" > ./service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/service-account.json" >> $GITHUB_ENV
          echo "✅ Authenticated with Google Cloud via Service Account"

      - name: Generate firebase.json from template
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          ANDROID_APP_ID: ${{ secrets.ANDROID_APP_ID }}
          IOS_APP_ID: ${{ secrets.IOS_APP_ID }}
        run: |
          sudo apt-get update && sudo apt-get install -y gettext-base
          envsubst < firebase.json.template > firebase.json
          echo "✅ Generated firebase.json from template"

      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo $GOOGLE_SERVICES_JSON > android/app/google-services.json

      - name: Update version number automatically
        run: |
          echo "📋 Auto-incrementing semantic version for release..."
          
          # Get current version from pubspec.yaml and parse components
          CURRENT_FULL=$(grep "^version:" pubspec.yaml | sed 's/version: //')
          CURRENT_VERSION=$(echo $CURRENT_FULL | cut -d'+' -f1)
          
          echo "Current version: $CURRENT_VERSION"
          
          # Parse semantic version components (major.minor.patch)
          MAJOR=$(echo $CURRENT_VERSION | cut -d'.' -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d'.' -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d'.' -f3)
          
          # Auto-increment patch version for each deployment
          NEW_PATCH=$((PATCH + 1))
          NEW_SEMANTIC_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          
          # Use GitHub run number as build number for Android versionCode
          GITHUB_RUN_NUM=${{ github.run_number }}
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA=$(echo $COMMIT_SHA | cut -c1-7)
          
          # Create final version: semantic+buildnumber
          NEW_VERSION="${NEW_SEMANTIC_VERSION}+${GITHUB_RUN_NUM}"
          
          echo "🚀 Version increment:"
          echo "  • Current: $CURRENT_VERSION"
          echo "  • New semantic: $NEW_SEMANTIC_VERSION"
          echo "  • Build number: $GITHUB_RUN_NUM"
          echo "  • Final version: $NEW_VERSION"
          echo "  • Commit: $SHORT_SHA"
          
          # Update pubspec.yaml with new version
          sed -i "s/^version:.*/version: $NEW_VERSION/" pubspec.yaml
          
          echo "✅ Version auto-incremented to: $NEW_VERSION"
          
          # Show the updated version line for verification
          echo "📄 Updated pubspec.yaml version:"
          grep "^version:" pubspec.yaml
          
          # Create version info file for deployment reference
          cat > version_info.txt << EOF
          MarketSnap Release Information
          =============================
          Version: $NEW_VERSION
          Semantic Version: $NEW_SEMANTIC_VERSION
          Previous Version: $CURRENT_VERSION
          Build Number: $GITHUB_RUN_NUM
          Commit SHA: $COMMIT_SHA
          Short SHA: $SHORT_SHA
          Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Branch: ${{ github.ref_name }}
          Workflow: ${{ github.workflow }}
          
          🎯 Automatic Version Increment
          • Major: $MAJOR (breaking changes)
          • Minor: $MINOR (new features)
          • Patch: $NEW_PATCH (bug fixes) ⬆️ AUTO-INCREMENTED
          • Build: $GITHUB_RUN_NUM (CI run number)
          EOF
          
          echo "📄 Version info file created:"
          cat version_info.txt

      - name: Install Flutter dependencies
        run: |
          echo "📦 Installing Flutter dependencies with caching..."
          if [ -d "~/.pub-cache" ]; then
            echo "✅ Flutter pub cache restored successfully"
          fi
          flutter pub get
          echo "✅ Flutter dependencies installed"
      
      - name: Create .env file
        env:
          DOTENV: ${{ secrets.DOTENV }}
        run: echo "$DOTENV" > .env

      - name: Generate Firebase options file
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          flutterfire configure --project=$FIREBASE_PROJECT_ID --platforms=android,ios --out=lib/firebase_options.dart --yes
          echo "✅ Generated lib/firebase_options.dart"

      - name: Setup Release Keystore
        env:
          RELEASE_KEYSTORE_BASE64: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          # Decode and save the release keystore
          echo "$RELEASE_KEYSTORE_BASE64" | base64 --decode > android/app/release.keystore
          
          # Create key.properties file for signing
          cat > android/key.properties << EOF
          storeFile=release.keystore
          storePassword=$KEYSTORE_PASSWORD
          keyAlias=$KEY_ALIAS
          keyPassword=$KEY_PASSWORD
          EOF
          
          echo "✅ Release keystore and signing configuration ready"

      - name: Build Android APK with caching optimization
        run: |
          echo "🏗️ Building Android APK with optimized caching..."
          
          # Check cache status
          if [ -d "~/.gradle/caches" ]; then
            echo "✅ Gradle dependencies cache restored"
          fi
          if [ -d "android/build" ]; then
            echo "✅ Gradle build cache restored"
          fi
          
          # Enable Gradle daemon and parallel builds for faster compilation
          export GRADLE_OPTS="-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true"
          
          # Skip flutter clean to preserve cached builds
          echo "⚡ Skipping flutter clean to preserve build cache..."
          
          # Build with verbose output for debugging
          flutter build apk --release --verbose
          
          echo "✅ Android APK built successfully with caching optimizations"

      - name: Deploy to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.ANDROID_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
          groups: testers
          file: build/app/outputs/flutter-apk/app-release.apk
          releaseNotesFile: version_info.txt

  deploy_backend:
    name: Deploy Firebase Backend
    needs: [validate]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Cache Node.js dependencies for backend deployment
      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: functions/node_modules
          key: node-${{ runner.os }}-${{ hashFiles('functions/package-lock.json', 'functions/package.json') }}
          restore-keys: |
            node-${{ runner.os }}-

      # Cache Firebase CLI for backend deployment
      - name: Cache Firebase CLI
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/firebase
            ~/.npm
          key: firebase-cli-${{ runner.os }}-${{ hashFiles('functions/package.json') }}
          restore-keys: |
            firebase-cli-${{ runner.os }}-

      # Cache compiled TypeScript build
      - name: Cache Functions build
        uses: actions/cache@v4
        with:
          path: functions/lib
          key: functions-build-${{ runner.os }}-${{ hashFiles('functions/src/**/*.ts', 'functions/tsconfig.json') }}
          restore-keys: |
            functions-build-${{ runner.os }}-

      - name: Install Firebase Tools
        run: |
          npm install -g firebase-tools
          echo "✅ Firebase CLI installed"

      - name: Authenticate with Google Cloud
        env:
          SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "$SERVICE_ACCOUNT_KEY" > ./service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ github.workspace }}/service-account.json" >> $GITHUB_ENV
          echo "✅ Authenticated with Google Cloud via Service Account"

      - name: Generate firebase.json from template
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          ANDROID_APP_ID: ${{ secrets.ANDROID_APP_ID }}
          IOS_APP_ID: ${{ secrets.IOS_APP_ID }}
        run: |
          sudo apt-get update && sudo apt-get install -y gettext-base
          envsubst < firebase.json.template > firebase.json
          echo "✅ Generated firebase.json from template"

      - name: Setup Firebase Project
        run: |
          firebase projects:list
          firebase use --add ${{ secrets.FIREBASE_PROJECT_ID }} --alias default
          echo "✅ Firebase project setup complete"

      - name: Setup Firebase Functions v2 Environment Variables
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "🤖 Setting up Firebase Functions v2 environment variables..."
          
          # Create functions/.env file for Firebase Functions v2
          cd functions
          
          cat > .env << EOF
          # MarketSnap Firebase Functions Environment Configuration
          # Firebase Functions v2 environment variables (non-reserved only)
          
          # OpenAI API Key for AI Helper Functions
          OPENAI_API_KEY=$OPENAI_API_KEY
          
          # AI Functions Control  
          AI_FUNCTIONS_ENABLED=true
          EOF
          
          if [ -n "$OPENAI_API_KEY" ]; then
            echo "✅ OpenAI API key configured for Functions v2 (key: ${OPENAI_API_KEY:0:10}...)"
            echo "✅ AI functions enabled"
          else
            echo "⚠️  OPENAI_API_KEY secret not found - AI features will be disabled"
            # Update .env to disable AI functions
            sed -i 's/AI_FUNCTIONS_ENABLED=true/AI_FUNCTIONS_ENABLED=false/' .env
          fi
          
          echo "🔧 Functions v2 environment configuration:"
          echo "  - Environment file: functions/.env created"
          echo "  - Variables: OPENAI_API_KEY, AI_FUNCTIONS_ENABLED"
          echo "  - Firebase Functions v1 config system replaced with v2 environment variables"
          
          cd ..

      - name: Fix Deployment Issues
        run: |
          echo "🔧 Running deployment issue fixes..."
          chmod +x scripts/fix_deployment_issues.sh
          ./scripts/fix_deployment_issues.sh

      - name: Deploy Firebase Backend
        run: |
          echo "🚀 Deploying Firebase backend with enhanced stability..."
          
          cd functions
          
          # Verify dependencies are installed (should be done by fix script)
          if [ ! -d "node_modules" ]; then
            echo "⚠️  Installing dependencies as backup..."
            npm install
          fi
          
          # Verify build is complete (should be done by fix script)
          if [ ! -d "lib" ]; then
            echo "⚠️  Building functions as backup..."
            npm run build
          fi
          
          cd ..
          
          # Deploy with enhanced error handling
          echo "📦 Starting final deployment verification..."
          firebase deploy --only functions,firestore,storage --non-interactive --debug
          
          echo "✅ Firebase backend deployed successfully with enhanced stability"

      - name: Activate Service Account for gcloud
        run: |
          gcloud auth activate-service-account --key-file=./service-account.json
          echo "✅ gcloud service account activated"

      - name: Configure TTL Policies
        run: |
          echo "🔄 Setting up TTL policy for messages collection..."
          # Configure TTL policy for messages collection expiresAt field
          gcloud firestore fields ttls update expiresAt \
            --collection-group=messages \
            --enable-ttl \
            --project=${{ secrets.FIREBASE_PROJECT_ID }} \
            --quiet
          echo "✅ TTL policy configured successfully"
  
#  deploy_ios:
#    name: Build and Deploy iOS
#    needs: [validate]
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#    runs-on: macos-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Setup Flutter
#        uses: subosito/flutter-action@v2
#        with:
#          channel: 'stable'
#
#      - name: Decode GoogleService-Info.plist
#        env:
#          GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}
#        run: |
#          echo "$GOOGLE_SERVICE_INFO_PLIST" | base64 --decode > ios/Runner/GoogleService-Info.plist
#
#      - name: Install Apple Certificate and Provisioning Profile
#        env:
#          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#        run: |
#          # create variables
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#
#          # import certificate and provisioning profile from secrets
#          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
#
#          # create temporary keychain
#          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#
#          # import certificate to keychain
#          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#          security list-keychain -d user -s $KEYCHAIN_PATH
#
#          # apply provisioning profile
#          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#
#      - name: Install dependencies
#        run: flutter pub get
#      
#      - name: Build iOS
#        run: |
#          flutter build ipa --release --export-options-plist=ios/ExportOptions.plist
#          
#      - name: Deploy to Firebase App Distribution
#        uses: wzieba/Firebase-Distribution-Github-Action@v1
#        with:
#          appId: ${{ secrets.IOS_APP_ID }}
#          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
#          groups: testers
#          file: build/ios/ipa/*.ipa 
