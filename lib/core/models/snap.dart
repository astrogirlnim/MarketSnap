import 'package:cloud_firestore/cloud_firestore.dart';

/// Represents a snap (photo or video) posted by a vendor.
/// Snaps auto-expire after 24 hours via Firestore TTL.
class Snap {
  /// Unique identifier for the snap
  final String snapId;

  /// UID of the vendor who posted this snap
  final String vendorUid;

  /// The media file URL in Firebase Storage
  final String mediaUrl;

  /// Type of media ('photo' or 'video')
  final String mediaType;

  /// Optional caption text
  final String? caption;

  /// When the snap was created
  final DateTime createdAt;

  /// When the snap expires (24h from creation)
  final DateTime expiresAt;

  /// Thumbnail URL for quick loading (generated by backend)
  final String? thumbnailUrl;

  /// Whether the media is still uploading
  final bool isUploading;

  /// File size in bytes
  final int? fileSizeBytes;

  /// Duration in seconds (for videos)
  final int? durationSeconds;

  /// Location data (optional, coarse location)
  final Map<String, dynamic>? location;

  const Snap({
    required this.snapId,
    required this.vendorUid,
    required this.mediaUrl,
    required this.mediaType,
    this.caption,
    required this.createdAt,
    required this.expiresAt,
    this.thumbnailUrl,
    this.isUploading = false,
    this.fileSizeBytes,
    this.durationSeconds,
    this.location,
  });

  /// Creates a new snap with auto-generated expiry
  factory Snap.create({
    required String vendorUid,
    required String mediaUrl,
    required String mediaType,
    String? caption,
    String? thumbnailUrl,
    bool isUploading = false,
    int? fileSizeBytes,
    int? durationSeconds,
    Map<String, dynamic>? location,
  }) {
    final now = DateTime.now();
    final expiresAt = now.add(const Duration(hours: 24));
    
    return Snap(
      snapId: '', // Will be set by Firestore
      vendorUid: vendorUid,
      mediaUrl: mediaUrl,
      mediaType: mediaType,
      caption: caption,
      createdAt: now,
      expiresAt: expiresAt,
      thumbnailUrl: thumbnailUrl,
      isUploading: isUploading,
      fileSizeBytes: fileSizeBytes,
      durationSeconds: durationSeconds,
      location: location,
    );
  }

  /// Creates a Snap from Firestore document data
  factory Snap.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    
    return Snap(
      snapId: doc.id,
      vendorUid: data['vendorUid'] as String,
      mediaUrl: data['mediaUrl'] as String,
      mediaType: data['mediaType'] as String,
      caption: data['caption'] as String?,
      createdAt: (data['createdAt'] as Timestamp).toDate(),
      expiresAt: (data['expiresAt'] as Timestamp).toDate(),
      thumbnailUrl: data['thumbnailUrl'] as String?,
      isUploading: data['isUploading'] as bool? ?? false,
      fileSizeBytes: data['fileSizeBytes'] as int?,
      durationSeconds: data['durationSeconds'] as int?,
      location: data['location'] as Map<String, dynamic>?,
    );
  }

  /// Converts Snap to Firestore document data
  Map<String, dynamic> toFirestore() {
    return {
      'vendorUid': vendorUid,
      'mediaUrl': mediaUrl,
      'mediaType': mediaType,
      'caption': caption,
      'createdAt': Timestamp.fromDate(createdAt),
      'expiresAt': Timestamp.fromDate(expiresAt),
      'thumbnailUrl': thumbnailUrl,
      'isUploading': isUploading,
      'fileSizeBytes': fileSizeBytes,
      'durationSeconds': durationSeconds,
      'location': location,
    };
  }

  /// Creates a copy with updated fields
  Snap copyWith({
    String? snapId,
    String? vendorUid,
    String? mediaUrl,
    String? mediaType,
    String? caption,
    DateTime? createdAt,
    DateTime? expiresAt,
    String? thumbnailUrl,
    bool? isUploading,
    int? fileSizeBytes,
    int? durationSeconds,
    Map<String, dynamic>? location,
  }) {
    return Snap(
      snapId: snapId ?? this.snapId,
      vendorUid: vendorUid ?? this.vendorUid,
      mediaUrl: mediaUrl ?? this.mediaUrl,
      mediaType: mediaType ?? this.mediaType,
      caption: caption ?? this.caption,
      createdAt: createdAt ?? this.createdAt,
      expiresAt: expiresAt ?? this.expiresAt,
      thumbnailUrl: thumbnailUrl ?? this.thumbnailUrl,
      isUploading: isUploading ?? this.isUploading,
      fileSizeBytes: fileSizeBytes ?? this.fileSizeBytes,
      durationSeconds: durationSeconds ?? this.durationSeconds,
      location: location ?? this.location,
    );
  }

  /// Checks if the snap has expired
  bool get hasExpired => DateTime.now().isAfter(expiresAt);

  /// Gets the time remaining until expiration
  Duration get timeUntilExpiry => expiresAt.difference(DateTime.now());

  /// Gets time remaining as formatted string
  String get timeUntilExpiryString {
    final duration = timeUntilExpiry;
    if (duration.inHours > 0) {
      return '${duration.inHours}h';
    } else if (duration.inMinutes > 0) {
      return '${duration.inMinutes}m';
    } else {
      return '${duration.inSeconds}s';
    }
  }

  /// Checks if this is a photo
  bool get isPhoto => mediaType == 'photo';

  /// Checks if this is a video
  bool get isVideo => mediaType == 'video';

  /// Gets the display URL (thumbnail if available, otherwise main URL)
  String get displayUrl => thumbnailUrl ?? mediaUrl;

  @override
  String toString() {
    return 'Snap(id: $snapId, vendor: $vendorUid, type: $mediaType, caption: "${caption ?? ''}", expires: $expiresAt)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    
    return other is Snap &&
        other.snapId == snapId &&
        other.vendorUid == vendorUid &&
        other.mediaUrl == mediaUrl &&
        other.mediaType == mediaType &&
        other.caption == caption &&
        other.createdAt == createdAt &&
        other.expiresAt == expiresAt &&
        other.thumbnailUrl == thumbnailUrl &&
        other.isUploading == isUploading &&
        other.fileSizeBytes == fileSizeBytes &&
        other.durationSeconds == durationSeconds;
  }

  @override
  int get hashCode {
    return snapId.hashCode ^
        vendorUid.hashCode ^
        mediaUrl.hashCode ^
        mediaType.hashCode ^
        caption.hashCode ^
        createdAt.hashCode ^
        expiresAt.hashCode ^
        thumbnailUrl.hashCode ^
        isUploading.hashCode ^
        fileSizeBytes.hashCode ^
        durationSeconds.hashCode;
  }
}