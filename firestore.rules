rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Vendors: Publicly readable, but only the vendor can write to their own document.
    match /vendors/{vendorId} {
      allow read;
      allow create, update, delete: if request.auth != null && request.auth.uid == vendorId;
    }

    // Regular Users: Publicly readable, but only the user can write to their own document.
    match /regularUsers/{userId} {
      allow read;
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Snaps: Publicly readable, but only the authenticated vendor can create, update, or delete their own snaps.
    match /snaps/{snapId} {
      allow read;
      allow create: if request.auth != null && request.resource.data.vendorId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.vendorId == request.auth.uid;
    }

    // Broadcasts: Publicly readable, but only the authenticated vendor can create, update, or delete their own broadcasts.
    match /broadcasts/{broadcastId} {
      allow read;
      allow create: if request.auth != null && request.resource.data.vendorUid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.vendorUid == request.auth.uid;
    }

    // Followers: Users can follow/unfollow vendors.
    // A user can create a document if they are the follower.
    // A user can delete a document if they are the follower.
    // Enhanced to support vendor-specific followers sub-collection
    match /vendors/{vendorId}/followers/{followerId} {
      allow read;
      allow create: if request.auth != null && request.resource.data.followerUid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.followerUid == request.auth.uid;
    }

    // Legacy followers collection (for backward compatibility)
    match /followers/{followerId} {
      allow read;
      allow create: if request.auth != null && request.resource.data.followerUid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.followerUid == request.auth.uid;
    }

    // FAQ Vectors: RAG feature for vendor FAQ content
    // Vendors can manage their own FAQ vectors, but anyone can read them for search
    match /faqVectors/{faqId} {
      allow read; // Public read for FAQ search functionality
      allow create: if request.auth != null && request.resource.data.vendorId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.vendorId == request.auth.uid;
    }

    // RAG Feedback: User feedback on recipe and FAQ suggestions
    // Users can create feedback for their own interactions and view their own history
    // Vendors can read feedback on their content for analytics
    match /ragFeedback/{feedbackId} {
      // Users can read their own feedback
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Vendors can read feedback on their content for analytics
      allow read: if request.auth != null && request.auth.uid == resource.data.vendorId;
      // Users can create feedback for their own interactions
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // No updates or deletes - feedback is immutable for analytics integrity
    }

    // Messages: Ephemeral messaging between vendor and shopper.
    // Only the sender (fromUid) and recipient (toUid) can read/write messages.
    // Messages auto-expire after 24h via TTL field.
    match /messages/{messageId} {
      // Allow reading if user is in participants array (for queries) OR if user is fromUid/toUid (for individual docs)
      allow read: if request.auth != null && 
        (request.auth.uid in resource.data.participants ||
         request.auth.uid == resource.data.fromUid || 
         request.auth.uid == resource.data.toUid);
      
      // Allow writing if user is fromUid or toUid (individual document updates)
      allow write: if request.auth != null && 
        (request.auth.uid == resource.data.fromUid || request.auth.uid == resource.data.toUid);
      
      // Allow creating if user is the sender and is in participants array
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.fromUid &&
        request.auth.uid in request.resource.data.participants;
    }
  }
} 