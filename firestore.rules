rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Vendors: Publicly readable, but only the vendor can write to their own document.
    match /vendors/{vendorId} {
      allow read;
      allow create, update, delete: if request.auth != null && request.auth.uid == vendorId;
    }

    // Snaps: Publicly readable, but only the authenticated vendor can create, update, or delete their own snaps.
    match /snaps/{snapId} {
      allow read;
      allow create: if request.auth != null && request.resource.data.vendorId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.vendorId == request.auth.uid;
    }

    // Broadcasts: Publicly readable, but only the authenticated vendor can create, update, or delete their own broadcasts.
    match /broadcasts/{broadcastId} {
      allow read;
      allow create: if request.auth != null && request.resource.data.vendorUid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.vendorUid == request.auth.uid;
    }

    // Followers: Users can follow/unfollow vendors.
    // A user can create a document if they are the follower.
    // A user can delete a document if they are the follower.
    match /followers/{followerId} {
      allow read;
      allow create: if request.auth != null && request.resource.data.followerUid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.followerUid == request.auth.uid;
    }

    // Messages: Ephemeral messaging between vendor and shopper.
    // Only the sender (fromUid) and recipient (toUid) can read/write messages.
    // Messages auto-expire after 24h via TTL field.
    match /messages/{messageId} {
      // Allow read if user is authenticated AND is either the sender or recipient
      // Note: We don't require the OTHER party to be authenticated - just that the
      // current user is authenticated and is involved in the conversation
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.fromUid || 
                      request.auth.uid == resource.data.toUid);
      
      // Allow create if user is authenticated and is the sender
      // The recipient (toUid) doesn't need to be currently authenticated
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.fromUid &&
                       request.resource.data.toUid != null &&
                       request.resource.data.text != null &&
                       request.resource.data.createdAt != null &&
                       request.resource.data.expiresAt != null &&
                       request.resource.data.conversationId != null;
      
      // Allow update only for marking messages as read, and only by the recipient
      // The sender doesn't need to be currently authenticated for this
      allow update: if request.auth != null && 
                       request.auth.uid == resource.data.toUid &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']) &&
                       request.resource.data.isRead == true;
      
      // No delete allowed - messages expire automatically via TTL
      allow delete: if false;
    }
  }
} 